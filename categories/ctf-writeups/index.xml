<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CTF WriteUps on The Mess Of Nebula</title><link>http://evalevanto.github.io/categories/ctf-writeups/</link><description>Recent content in CTF WriteUps on The Mess Of Nebula</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>¬© 2023 Eva Levanto</copyright><lastBuildDate>Thu, 16 Nov 2023 00:00:00 +0000</lastBuildDate><atom:link href="http://evalevanto.github.io/categories/ctf-writeups/index.xml" rel="self" type="application/rss+xml"/><item><title>It's On Fire! üî•</title><link>http://evalevanto.github.io/posts/its_on_fire/</link><pubDate>Thu, 16 Nov 2023 00:00:00 +0000</pubDate><guid>http://evalevanto.github.io/posts/its_on_fire/</guid><description>The first thing is to decompile the apk to inspect the application files. Since this is a Flare-On challenge, attempt to search for [flare-on.com](http://flare-on.com) shows up in the strings.xml :
Where is this string used in the code?
private final String d(Context context) { String slice; String string = context.getString(R.string.c2); Intrinsics.checkNotNullExpressionValue(string, &amp;#34;context.getString(R.string.c2)&amp;#34;); String string2 = context.getString(R.string.w1); Intrinsics.checkNotNullExpressionValue(string2, &amp;#34;context.getString(R.string.w1)&amp;#34;); StringBuilder sb = new StringBuilder(); sb.append(string.subSequence(4, 10)); sb.append(string2.subSequence(2, 5)); String sb2 = sb.</description></item><item><title>SHCTF23: Magic Trick</title><link>http://evalevanto.github.io/posts/magic_trick/</link><pubDate>Tue, 26 Sep 2023 00:00:00 +0000</pubDate><guid>http://evalevanto.github.io/posts/magic_trick/</guid><description>Description: Sometimes, what&amp;rsquo;s white is merely a canvas awaiting its story. Recall the artist&amp;rsquo;s technique from the age of angels, and you might unveil a tale hidden in code.
This was a fun puzzle! üòÉ
You are given a executable file and a blank white png file.
Binary analysis ‚îî‚îÄ$ file magic magic: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=3dfe013b3027047470d1aac10a3504baf6969725, for GNU/Linux 2.6.32, stripped objdump -sj .</description></item><item><title>SHCTF23: SecureNotes3</title><link>http://evalevanto.github.io/posts/snotes/</link><pubDate>Mon, 25 Sep 2023 00:00:00 +0000</pubDate><guid>http://evalevanto.github.io/posts/snotes/</guid><description>You are presented with an apk file: SecureNotes3.apk
The first thing to do is to decompile the apk to retrieve the java classes and resources.
Code Analysis **MainActivity.java** The layout has a prompt for a user to input a password. This password is then validated by a function validatePassword from a loaded SecureNotes3.so library. Upon validation, this password is used to decrypt an SQLite DB called notes.db that has a very fishy secrets table.</description></item><item><title>SHCTF23: Veiled Dimensions</title><link>http://evalevanto.github.io/posts/veiled_dimensions/</link><pubDate>Mon, 25 Sep 2023 00:00:00 +0000</pubDate><guid>http://evalevanto.github.io/posts/veiled_dimensions/</guid><description>Description: Dive deep into the virtual realm and remember, duality hides the truth. Seek where they intertwine, and the solution will emerge.
Unintended Path Fire up the program in gdb: gdb -q ./dim
Disassemble main . There are 3 calls to puts right before an exit() .You find an interesting one and from objdump -sj .rodata dim , you learn that this is the fail case prompt: ‚ÄúIncorrect key!‚Äù.</description></item><item><title>BHMEACTF22: Secret</title><link>http://evalevanto.github.io/posts/secret/</link><pubDate>Thu, 06 Oct 2022 00:00:00 +0000</pubDate><guid>http://evalevanto.github.io/posts/secret/</guid><description>For the birds I use pwntools for my scripting. While I will show snippets where relevant, I will share the full script at the end.
I will create a follow-up blog on ROP introduction and notify.
Checksec [*] &amp;#39;/home/levanto/Documents/Return-To-ROP/ChasingFlags/BlackHat/PWN/secret/main&amp;#39; Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled There is a stack canary - which you have to get if you would need to overwrite a return address.</description></item><item><title>AHCTF2021: NameCheck</title><link>http://evalevanto.github.io/posts/namecheck/</link><pubDate>Sun, 18 Sep 2022 00:00:00 +0000</pubDate><guid>http://evalevanto.github.io/posts/namecheck/</guid><description>For the birds It has been a while since I have blogged. The importance of doing so has not been absent only outweighed by the inertia(that dread to begin). This is the start of an attempt to put more of my thoughts on e-paper. I also maintain a telegram space where I dump materials/resources I encounter as I go along.
Checksec [*] &amp;#39;/home/levanto/Documents/Return-To-ROP/ChasingFlags/AHCTF/finals/namecheck&amp;#39; Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX disabled PIE: No PIE (0x8048000) RWX: Has RWX segments .</description></item><item><title>AH19CTF WriteUps: Command Parser</title><link>http://evalevanto.github.io/posts/commandparser/</link><pubDate>Sat, 17 Aug 2019 00:00:00 +0000</pubDate><guid>http://evalevanto.github.io/posts/commandparser/</guid><description>What&amp;rsquo;s provided: Server access to a directory containing an executable and a flag file. You cannot just cat flag because r--r----- 1 commandparserctf-pwn root ... flag and of course, your whoami profile is not in the sudoers list.
A link to download the executable file. This is good. You can dissassemble it later.
Let&amp;rsquo;s get cracking :D Your first step is to run the executable and have a clue of what it does.</description></item></channel></rss>