<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>input check on The Mess Of Nebula</title><link>http://evalevanto.github.io/tags/input-check/</link><description>Recent content in input check on The Mess Of Nebula</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Â© 2023 Eva Levanto</copyright><lastBuildDate>Tue, 01 Sep 2020 00:00:00 +0000</lastBuildDate><atom:link href="http://evalevanto.github.io/tags/input-check/index.xml" rel="self" type="application/rss+xml"/><item><title>MicroCorruption: Reykjavik</title><link>http://evalevanto.github.io/posts/microcorruption-reykjavik/</link><pubDate>Tue, 01 Sep 2020 00:00:00 +0000</pubDate><guid>http://evalevanto.github.io/posts/microcorruption-reykjavik/</guid><description>Military-grade security lock they say. Here is the manual:
This lock is not attached to any HSM module. Military-grade on-device encryption has been implemented to keep the password secure. Passwords entered cannot be read from memory. This is the main function:
Interesting findings:
A block of opcode: beginning from 0x4520 spanning for 0xf8 is passed to enc function. The destination of the result is set for #0x2400.
The enc function basically interchanges the opcode for the one destination to the other using some operations to determine the address (you decide to save the details for this; you can inspect it later).</description></item><item><title>MicroCorruption: New Orleans</title><link>http://evalevanto.github.io/posts/microcorruption-new-orleans/</link><pubDate>Wed, 26 Aug 2020 00:00:00 +0000</pubDate><guid>http://evalevanto.github.io/posts/microcorruption-new-orleans/</guid><description>You find a manual for the LockIT Pro Lock:
You learn some things from the manual:
It is not attached to a HSM module. Password set by entering it on the app restarting the lock. You are presented with a live debugger, a live memory dump, a disassembler and a view of the register states.
Looking through the main you notice a create_password function that gets called before the input is required or a check for correct input is done.</description></item><item><title>MicroCorruption: Sydney</title><link>http://evalevanto.github.io/posts/microcorruption-sydney/</link><pubDate>Wed, 26 Aug 2020 00:00:00 +0000</pubDate><guid>http://evalevanto.github.io/posts/microcorruption-sydney/</guid><description>Another LockIT Pro Lock manual but this is a more secure, revised version they say ;) :
You learn that:
The lock is not attached to a HSM(Hardware Security Module). The password is now not stored in memory. This is how the main function looks like:
There is a check_password function called. You do the usual quick run of the program using a dummy input test, set a breakpoint on check_password and follow through the flow.</description></item></channel></rss>