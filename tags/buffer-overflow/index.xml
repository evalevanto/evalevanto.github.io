<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>buffer overflow on The Mess Of Nebula</title><link>http://evalevanto.github.io/tags/buffer-overflow/</link><description>Recent content in buffer overflow on The Mess Of Nebula</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Â© 2023 Eva Levanto</copyright><lastBuildDate>Wed, 04 Nov 2020 00:00:00 +0000</lastBuildDate><atom:link href="http://evalevanto.github.io/tags/buffer-overflow/index.xml" rel="self" type="application/rss+xml"/><item><title>MicroCorruption: Santa Cruz</title><link>http://evalevanto.github.io/posts/microcorruption-cruz/</link><pubDate>Wed, 04 Nov 2020 00:00:00 +0000</pubDate><guid>http://evalevanto.github.io/posts/microcorruption-cruz/</guid><description>Nice! Here is a lock. This is the manual:
Passwords that are too long are rejected. There is not much clues from the manual.
The main function just calls the login function:
Authentication requires a username and password input. The prompt states that these inputs should be between 8 and 16 chars. :D
Bytes 0x0, 0x8 and 0x10 are set into the addresses at r4 - (0x6, 0x19,0x18) respectively. This will probably make sense soon.</description></item><item><title>MicroCorruption: Cusco</title><link>http://evalevanto.github.io/posts/microcorruption-cusco/</link><pubDate>Wed, 26 Aug 2020 00:00:00 +0000</pubDate><guid>http://evalevanto.github.io/posts/microcorruption-cusco/</guid><description>In this manual, you notice that:
This lock is attached to HSM-1 module. The conditional flag that accidentally gets set when very long passwords are put in, has been removed. After a fast fail using a test input: aaaaaaaaaaaaaaaa, turns out the program does not exit. It instead, loops back to the start of the program.
This is interesting. Why? Because it is a clue that at some point at the end of a failed password verification; instead of a program exit, the return address points to the beginning instruction to jump to.</description></item><item><title>MicroCorruption: Hanoi</title><link>http://evalevanto.github.io/posts/microcorruption-hanoi/</link><pubDate>Wed, 26 Aug 2020 00:00:00 +0000</pubDate><guid>http://evalevanto.github.io/posts/microcorruption-hanoi/</guid><description>You get to Hanoi, you find a manual.
Things are a bit different this time:
This Lock is attached to LockIT Pro HSM-1. Password stored in the HSM. Password set by connecting to app through the HSM and restarting the Lock. A flag is set by the HSM after validating a correct password input. The main function just calls the login function. The prompt for writing your test input gives an interesting clue: the password range.</description></item></channel></rss>